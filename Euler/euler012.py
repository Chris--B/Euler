from Euler import utils
import math

problem_text = """
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

def first_triangle_with_divisors(count):
	num = 1
	tri_num = 1

	# We want a triangle number with 500 divisors. The
	# first number with 500 divisors is the product of the
	# first 500 primes, so we round way up and assume
	# the first triangle number won't have prime factors
	# exceeding the 5000th prime.
	# In practice, for this problem, we won't need any beyond
	# about 13 thousand. But we don't know that. ;)
	five_thousandth_prime = 48611
	primes = utils.primes_below(five_thousandth_prime)

	while True:
		num += 1
		tri_num += num
		if count_factors(tri_num, primes) >= count:
			return tri_num

def count_factors(num, primes):
	pfactors = utils.prime_factors_cached(num, primes)
	return utils.product(power+1 for (_, power) in pfactors)

def compute_answer():
	return first_triangle_with_divisors(500)

given = [
	(28, first_triangle_with_divisors(5)),
]
